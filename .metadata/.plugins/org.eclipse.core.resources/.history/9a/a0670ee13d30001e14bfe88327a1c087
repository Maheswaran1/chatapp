package com.zoho.RedisDao;

import java.io.IOException;
import java.util.ArrayList;

import com.zoho.api.*;
import com.zoho.database.RedisCache;
import com.zoho.model.Email;
import com.zoho.model.ObjectFactory;

public class EmailRedisSet extends EmailDao {
	RedisCache cache = RedisCache.getInstance();

	private void setAllEmail(String userId, ArrayList<Email> emailList) {
		for (Email email : emailList) {
			String verified = String.valueOf(email.isVerifed());
			cache.setDataInRedis("Email"+userId+verified, email.getEmailId());
			try {
				cache.setObjectInRedis(email.getEmailId(), email);
				if (email.isPrimaryEmail()) {
					cache.setObjectInRedis("PrimaryEmail" + userId, email);
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}

	public ArrayList<Email> getAllEmail(String userId) {
		EmailDao emailDao = new EmailDao();
		ArrayList<Email> emailList = emailDao.getAllEmail(userId);
		setAllEmail(userId, emailList);
		return emailList;
	}

	@Override
	public Email getPrimaryEmail(String userId) {
		EmailDao emailDao = new EmailDao();
		Email priamaryEmailObj = emailDao.getPrimaryEmail(userId);
		try {
			cache.setObjectInRedis("PrimaryEmail" + userId, priamaryEmailObj);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return priamaryEmailObj;
	}

	@Override
	public String getUserId(String EmailId) {
		EmailDao emailDao = new EmailDao();
		String userId = emailDao.getUserId(EmailId);
		cache.setDataInRedis("UserId" + EmailId, userId);
		return userId;
	}

	public Email getEmailObject(String emailId) {
		EmailDao emailDao = new EmailDao();
		Email email = emailDao.getEmailObject(emailId);
		try {
			cache.setObjectInRedis(emailId, email);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return email;
	}
	
	public ArrayList<ObjectFactory> getVerifedEmails(String userId) {
		EmailDao emailDao = new EmailDao();
		ArrayList<ObjectFactory> emailList = emailDao.getVerifedEmails(userId);
		
		return null;
		
	}

}
